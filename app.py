from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *
import os
import re
import math

app = Flask(__name__)

LINE_CHANNEL_ACCESS_TOKEN = 'f9aa6b49ac00dfb359098504cffe6eab'
LINE_CHANNEL_SECRET = 'kzXIG0cO1xDAPMJaQ0NrEiufMINBbst7Z5ndou3YkPp21dJKvr3ZHIL4eeePNM2q4JPFmy+ttnGunjBPaEZ3Vl1yG3gVR8sISp/DVpy7SibXB+xoed0JZd2MmbU9qnhKkf2Eu5teI7DiM/v0DMkV7AdB04t89/1O/w1cDnyilFU='

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

user_drug_selection = {}

@app.route('/')
def home():
    return 'LINE Bot is running!'

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature')
    body = request.get_data(as_text=True)

    print("üì© Received body:", body)
    print("üßæ Signature:", signature)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("‚ùå Invalid Signature ‚Äî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE_CHANNEL_SECRET")
        abort(400)
    except Exception as e:
        print(f"‚ùå Exception occurred: {e}")
        abort(400)
    return 'OK'

def send_drug_selection(event):
    user_id = event.source.user_id

    carousel1 = CarouselTemplate(columns=[
        CarouselColumn(title='Paracetamol', text='10‚Äì15 mg/kg/dose', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Paracetamol', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Paracetamol')]),
        CarouselColumn(title='Cetirizine', text='0.25 mg/kg/day', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cetirizine', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cetirizine')]),
        CarouselColumn(title='Amoxicillin', text='250 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Amoxicillin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Amoxicillin')]),
        CarouselColumn(title='Cephalexin', text='125 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cephalexin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cephalexin')]),
        CarouselColumn(title='Cefdinir', text='125 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cefdinir', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cefdinir')]),
        CarouselColumn(title='Cefixime', text='100 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Cefixime', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Cefixime')]),
        CarouselColumn(title='Augmentin', text='600 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Augmentin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Augmentin')]),
        CarouselColumn(title='Azithromycin', text='200 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Azithromycin', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Azithromycin')]),
        CarouselColumn(title='Hydroxyzine', text='10 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Hydroxyzine', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Hydroxyzine')]),
        CarouselColumn(title='Ferrous drop', text='15 mg/0.6 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ferrous drop', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Ferrous drop')])
    ])

    carousel2 = CarouselTemplate(columns=[
        CarouselColumn(title='Salbutamol', text='2 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Salbutamol', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Salbutamol')]),
        CarouselColumn(title='Chlorpheniramine', text='2 mg/5 ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Chlorpheniramine', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Chlorpheniramine')]),
        CarouselColumn(title='Domperidone', text='1 mg/ml', actions=[MessageAction(label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Domperidone', text='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤: Domperidone')])
    ])

    line_bot_api.reply_message(
        event.reply_token,
        TemplateSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å", template=carousel1)
    )

    line_bot_api.push_message(
        user_id,
        TemplateSendMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", template=carousel2)
    )

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip()

    if text.lower() in ['‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤', 'dose', '‡πÄ‡∏£‡∏¥‡πà‡∏°']:
        send_drug_selection(event)
        return

    if text == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà":
        if user_id in user_drug_selection:
            del user_drug_selection[user_id]
        send_drug_selection(event)
        return

    if text.startswith("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤:"):
        drug_name = text.replace("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤:", "").strip()
        user_drug_selection[user_id] = drug_name
        reply = f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {drug_name} ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡πÄ‡∏ä‡πà‡∏ô 20"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
        return

    if user_id in user_drug_selection:
        match = re.search(r"(\d+(\.\d+)?)", text)
        if match:
            weight = float(match.group(1))
            drug = user_drug_selection[user_id]

            try:
                if drug == "Paracetamol":
                    dose_min = weight * 10
                    dose_max = weight * 15
                    reply = f"Paracetamol ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {dose_min:.2f} - {dose_max:.2f} mg ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

                elif drug == "Cetirizine":
                    dose = weight * 0.25
                    reply = f"Cetirizine ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {dose:.2f} mg ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô"

                elif drug == "Domperidone":
                    dose = weight * 0.25
                    reply = f"Domperidone ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {dose:.2f} mg (1 mg/ml) ‚âà {dose:.2f} ml ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

                elif drug == "Hydroxyzine":
                    dose = weight * 0.5
                    volume = dose / (10 / 5)
                    reply = f"Hydroxyzine: {dose:.2f} mg ‚âà {volume:.2f} ml ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

                elif drug == "Ferrous drop":
                    dose = weight * 3
                    volume = dose / (15 / 0.6)
                    reply = f"Ferrous fumarate: {dose:.2f} mg ‚âà {volume:.2f} ml ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô"

                elif drug == "Salbutamol":
                    dose = weight * 0.15
                    volume = dose / (2 / 5)
                    reply = f"Salbutamol: {dose:.2f} mg ‚âà {volume:.2f} ml ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

                elif drug == "Chlorpheniramine":
                    dose = weight * 0.35
                    volume = dose / (2 / 5)
                    reply = f"Chlorpheniramine: {dose:.2f} mg/day ‚âà {volume:.2f} ml/day (‡πÅ‡∏ö‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å 8 ‡∏ä‡∏°.)"

                elif drug in ["Amoxicillin", "Cephalexin", "Cefdinir", "Cefixime", "Augmentin", "Azithromycin"]:
                    settings = {
                        "Amoxicillin":   {"dose": 50, "conc": 250 / 5, "bottle": 60, "days": 7},
                        "Cephalexin":    {"dose": 50, "conc": 125 / 5, "bottle": 60, "days": 7},
                        "Cefdinir":      {"dose": 14, "conc": 125 / 5, "bottle": 30, "days": 5},
                        "Cefixime":      {"dose": 8,  "conc": 100 / 5, "bottle": 30, "days": 5},
                        "Augmentin":     {"dose": 90, "conc": 600 / 5, "bottle": 70, "days": 10},
                        "Azithromycin":  {"dose": 10, "conc": 200 / 5, "bottle": 15, "days": 3}
                    }

                    cfg = settings[drug]
                    total_mg_day = weight * cfg["dose"]
                    ml_per_day = total_mg_day / cfg["conc"]
                    total_ml = ml_per_day * cfg["days"]
                    bottles = math.ceil(total_ml / cfg["bottle"])

                    reply = (
                        f"{drug}:\n"
                        f"‡∏Ç‡∏ô‡∏≤‡∏î: {total_mg_day:.0f} mg/‡∏ß‡∏±‡∏ô ‚âà {ml_per_day:.1f} ml/‡∏ß‡∏±‡∏ô\n"
                        f"‡πÉ‡∏ä‡πâ {cfg['days']} ‡∏ß‡∏±‡∏ô ‡∏£‡∏ß‡∏° {total_ml:.1f} ml ‚Üí ‡∏à‡πà‡∏≤‡∏¢ {bottles} ‡∏Ç‡∏ß‡∏î ({cfg['bottle']} ml)"
                    )
                else:
                    reply = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"

                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

            except Exception as e:
                print(f"‚ùå Error in calculation: {e}")
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"))
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 20")
            )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

LINE_CHANNEL_ACCESS_TOKEN = 'f9aa6b49ac00dfb359098504cffe6eab'
LINE_CHANNEL_SECRET = 'kzXIG0cO1xDAPMJaQ0NrEiufMINBbst7Z5ndou3YkPp21dJKvr3ZHIL4eeePNM2q4JPFmy+ttnGunjBPaEZ3Vl1yG3gVR8sISp/DVpy7SibXB+xoed0JZd2MmbU9qnhKkf2Eu5teI7DiM/v0DMkV7AdB04t89/1O/w1cDnyilFU='